"use strict";var ApplicationConfiguration=function(){var applicationModuleName="foodbank-template",applicationModuleVendorDependencies=["ngResource","ngCookies","ui.router","ui.bootstrap","ui.utils","datatables","datatables.colvis","datatables.colreorder","AngularPrint","smart-table","angularMoment","uiGmapgoogle-maps","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$http","$rootScope",function($http,$rootScope){$http.get("api/settings/").then(function(response){$rootScope.tconfig=response.data},function(response){console.log("Get Template Config: error")}),$http.get("api/media/").then(function(response){$rootScope.mediaData=response.data},function(response){console.log("Get Media Data: error")})}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("customer"),ApplicationConfiguration.registerModule("donor"),ApplicationConfiguration.registerModule("driver"),ApplicationConfiguration.registerModule("food"),ApplicationConfiguration.registerModule("media"),ApplicationConfiguration.registerModule("packing"),ApplicationConfiguration.registerModule("questionnaire"),ApplicationConfiguration.registerModule("schedule"),ApplicationConfiguration.registerModule("settings"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("volunteer"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("root",{url:"/",views:{header:{templateUrl:"modules/core/views/header.client.view.html",controller:"HeaderController as headerCtrl"},sidebar:{templateUrl:"modules/core/views/sidebar.client.view.html",controller:"SidebarController as sidebarCtrl"},content:{templateUrl:"modules/core/views/home.client.view.html",controller:"HomeController as homeCtrl"},footer:{templateUrl:"modules/core/views/footer.client.view.html"}}}).state("root.403",{url:"403",views:{"content@":{templateUrl:"modules/core/views/errors/403.client.view.html"}}}).state("root.404",{url:"404",views:{"content@":{templateUrl:"modules/core/views/errors/404.client.view.html"}}}).state("root.500",{url:"500",views:{"content@":{templateUrl:"modules/core/views/errors/500.client.view.html"}}}),$urlRouterProvider.when("","signin"),$urlRouterProvider.otherwise("404")}]),function(){function HeaderController(Authentication){var self=this;self.authentication=Authentication}HeaderController.$inject=["Authentication"],angular.module("core").controller("HeaderController",HeaderController)}(),function(){function HomeController(Authentication){var self=this;self.authentication=Authentication}HomeController.$inject=["Authentication"],angular.module("core").controller("HomeController",HomeController)}(),function(){function SidebarController($scope,Authentication,Menus){function getMenu(user){var role=user.roles[0],menus=angular.copy(Menus);if(self.menu=menus.getMenu(role),"user"===role){var accountType=user.accountType[0].charAt(0).toUpperCase()+user.accountType[0].slice(1);self.menu.items.forEach(function(item){item.uiRoute=item.uiRoute.replace(/REPLACETYPE/,accountType).replace(/REPLACEID/,user.accountType[0])}),user.hasApplied?menus.removeMenuItem(role,"/create"):menus.removeMenuItem(role,"/edit")}}function toggleCollapsibleMenu(){self.isCollapsed=!self.isCollapsed}var self=this;self.authentication=Authentication,self.user=Authentication.user,self.isCollapsed=!1,self.getMenu=getMenu,self.toggleCollapsibleMenu=toggleCollapsibleMenu,self.user&&getMenu(self.user),$scope.$on("$stateChangeSuccess",function(){self.isCollapsed=!1})}SidebarController.$inject=["$scope","Authentication","Menus"],angular.module("core").controller("SidebarController",SidebarController)}(),function(){function dateField($filter,moment){return console.log("loading up datefiled"),{require:"ngModel",link:function(scope,element,attrs,ngModelController){ngModelController.$parsers.push(function(data){function isValid(){return date.diff(moment())<0}var date=moment(data,"YYYY-MM-DD",!0);return ngModelController.$setValidity("date",isValid()),isValid()?date.toDate():void 0}),ngModelController.$formatters.push(function(data){return $filter("date")(data,"yyyy-MM-dd")})}}}dateField.$inject=["$filter","moment"],angular.module("core").directive("dateField",dateField)}(),function(){function onLastRepeat(){return function(scope){scope.$last&&scope.$emit("repeatLastDone")}}angular.module("core").directive("onLastRepeat",onLastRepeat)}(),angular.module("core").directive("sidebarToggle",function(){return{restrict:"C",compile:function(element,attr){"offcanvas"===attr.toggle&&element.click(function(e){e.preventDefault(),angular.element(window).width()>=768?angular.element("body").toggleClass("sidebar-collapse"):angular.element("body").hasClass("sidebar-open")?(angular.element("body").removeClass("sidebar-open"),angular.element("body").removeClass("sidebar-collapse")):angular.element("body").addClass("sidebar-open")})}}}),function(){function treeview(){return angular.element.fn.tree=function(){return angular.element(this).each(function(){var btn=angular.element(this).children("a").first(),menu=angular.element(this).children(".treeview-menu").first(),isActive=angular.element(this).hasClass("active");isActive&&(menu.show(),btn.children(".fa-angle-left").first().removeClass("fa-angle-left").addClass("fa-angle-down")),btn.click(function(e){e.preventDefault(),isActive?(menu.slideUp(),isActive=!1,btn.children(".fa-angle-down").first().removeClass("fa-angle-down").addClass("fa-angle-left"),btn.parent("li").removeClass("active")):(menu.slideDown(),isActive=!0,btn.children(".fa-angle-left").first().removeClass("fa-angle-left").addClass("fa-angle-down"),btn.parent("li").addClass("active"))}),menu.find("li > a").each(function(){var pad=parseInt(angular.element(this).css("margin-left"))+10;angular.element(this).css({"margin-left":pad+"px"})})})},{restrict:"C",link:function(scope,element){scope.$on("repeatLastDone",function(){angular.element(element).tree()})}}}angular.module("core").directive("treeview",treeview)}(),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(this.roles.indexOf("*")!==-1)return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("admin"),this.addMenu("user"),this.addMenu("customer"),this.addMenu("volunteer"),this.addMenu("driver"),this.addMenu("donor")}]),angular.module("customer").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.listCustomers",{url:"admin/customers",views:{"content@":{templateUrl:"modules/customer/views/admin/list-customers.client.view.html",controller:"CustomerAdminController as customerCtrl"}}}).state("root.viewCustomerAdmin",{url:"admin/customers/:customerId",views:{"content@":{templateUrl:"modules/customer/views/view-customer.client.view.html",controller:"CustomerAdminController as customerCtrl"}}}).state("root.editCustomerAdmin",{url:"admin/customers/:customerId/edit",views:{"content@":{templateUrl:"modules/customer/views/edit-customer.client.view.html",controller:"CustomerAdminController as customerCtrl"},"general-info@root.editCustomerAdmin":{templateUrl:"modules/customer/views/partials/general-info.partial.html"},"employment@root.editCustomerAdmin":{templateUrl:"modules/customer/views/partials/employment.partial.html"},"food-preferences@root.editCustomerAdmin":{templateUrl:"modules/customer/views/partials/food-preferences.partial.html"},"financial@root.editCustomerAdmin":{templateUrl:"modules/customer/views/partials/financial.partial.html"},"household@root.editCustomerAdmin":{templateUrl:"modules/customer/views/partials/household.partial.html"}}})}]),angular.module("customer").run(["Menus",function(Menus){Menus.addMenuItem("admin","Client Database","admin/customers","item","root.listCustomers","",["admin"],0),Menus.addMenuItem("customer","Edit Application","/edit","item","root.editCustomerUser({customerId: sidebarCtrl.user._id})","",["customer"],0)}]),angular.module("customer").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.createCustomerUser",{url:"customer/create",views:{"content@":{templateUrl:"modules/customer/views/user/create-customer.client.view.html",controller:"CustomerUserController as customerCtrl"},"general-info@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/general-info.partial.html"},"employment@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/employment.partial.html"},"food-preferences@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/food-preferences.partial.html"},"financial@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/financial.partial.html"},"household@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/household.partial.html"},"waiver@root.createCustomerUser":{templateUrl:"modules/customer/views/partials/waiver.partial.html"}}}).state("root.createCustomerUser-success",{url:"customer/create/success",views:{"content@":{templateUrl:"modules/customer/views/user/create-customer-success.client.view.html"}}}).state("root.viewCustomerUser",{url:"customer/:customerId",views:{"content@":{templateUrl:"modules/customer/views/view-customer.client.view.html",controller:"CustomerUserController as customerCtrl"}}}).state("root.editCustomerUser",{url:"customer/:customerId/edit",views:{"content@":{templateUrl:"modules/customer/views/edit-customer.client.view.html",controller:"CustomerUserController as customerCtrl"},"general-info@root.editCustomerUser":{templateUrl:"modules/customer/views/partials/general-info.partial.html"},"employment@root.editCustomerUser":{templateUrl:"modules/customer/views/partials/employment.partial.html"},"food-preferences@root.editCustomerUser":{templateUrl:"modules/customer/views/partials/food-preferences.partial.html"},"financial@root.editCustomerUser":{templateUrl:"modules/customer/views/partials/financial.partial.html"},"household@root.editCustomerUser":{templateUrl:"modules/customer/views/partials/household.partial.html"}}})}]),function(){function CustomerAdminController($window,$stateParams,$state,Authentication,CustomerAdmin,Food){var self=this,user=Authentication.user;self.authentication=Authentication,user&&user.roles.indexOf("admin")<0&&$state.go("root"),self.customer=self.customer||{},self.dtOptions={dom:"TCRlfrtip",tableTools:{sSwfPath:"/lib/datatables-tabletools/swf/copy_csv_xls.swf",aButtons:["copy","xls"]}},self.foodList=self.foodList||[],self.customer.foodPreferences=self.customer.foodPreferences||[],self.findFood=function(){Food.query({},function(foods){foods.forEach(function(food){self.foodList=self.foodList.concat(food.items)})})},self.selectAll=function(checked){checked?self.customer.foodPreferences=[]:(self.customer.foodPreferences=[],self.foodList.forEach(function(item){self.customer.foodPreferences.push(item._id)}))},self.foodIsChecked=function(selectedFood){if(self.customer.foodPreferences)return self.customer.foodPreferences.indexOf(selectedFood._id)>-1},self.toggleSelection=function(selectedFood){var index=self.customer.foodPreferences.indexOf(selectedFood._id);index>-1?self.customer.foodPreferences.splice(index,1):self.customer.foodPreferences.push(selectedFood._id)},self.customer.household=[{name:self.customer.firstName+" "+self.customer.lastName,relationship:"Applicant",dateOfBirth:self.customer.dateOfBirth}],self.setDependantList=function(numberOfDependants){var temp=angular.copy(self.customer.household);self.customer.household=[];for(var i=numberOfDependants-1;i>=0;i--)self.customer.household[i]=temp[i]||{}},self.splitByComma=function(foodItems){if(foodItems){var temp=[];return foodItems.forEach(function(itemId){self.foodList.forEach(function(food){itemId===food._id&&temp.push(food.name)})}),temp.join(", ")}},self.total=function(data,type){if(data)return data.reduce(function(a,b){return a+b[type]},0)},self.find=function(){self.customers=CustomerAdmin.query()},self.findOne=function(){self.customer=CustomerAdmin.get({customerId:$stateParams.customerId},function(customer){self.numberOfDependants=customer.household.length,self.setDependantList(self.numberOfDependants)})},self.update=function(status){var customer=self.customer;status&&(customer.status=status),customer.$update(function(){$state.go("root.listCustomers")},function(errorResponse){self.error=errorResponse.data.message})},self.delete=function(customer){$window.confirm("Are you sure?")&&customer.$delete(function(){$state.go("root.listCustomers",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})}}CustomerAdminController.$inject=["$window","$stateParams","$state","Authentication","CustomerAdmin","Food"],angular.module("customer").controller("CustomerAdminController",CustomerAdminController)}(),function(){function CustomerUserController($stateParams,$state,Authentication,CustomerUser,moment,Data){var self=this,user=Authentication.user;self.authentication=Authentication,user||$state.go("root.signin"),user&&user.hasApplied&&$state.is("root.createCustomerUser")&&$state.go("root.editCustomerUser",{customerId:user._id}),self.customer=self.customer||{},angular.extend(self.customer,user),self.foodList=self.foodList||[],self.customer.foodPreferences=self.customer.foodPreferences||[],self.findFood=function(){CustomerUser.query({},function(foods){foods.forEach(function(food){self.foodList=self.foodList.concat(food.items)})})},self.selectAll=function(checked){checked?self.customer.foodPreferences=[]:(self.customer.foodPreferences=[],self.foodList.forEach(function(item){self.customer.foodPreferences.push(item._id)}))},self.foodIsChecked=function(selectedFood){if(self.customer.foodPreferences)return self.customer.foodPreferences.indexOf(selectedFood._id)>-1},self.toggleSelection=function(selectedFood){var index=self.customer.foodPreferences.indexOf(selectedFood._id);index>-1?self.customer.foodPreferences.splice(index,1):self.customer.foodPreferences.push(selectedFood._id)},self.customer.employment=self.customer.employment||{},self.customer.financialAssessment=self.customer.financialAssessment||{},self.customer.financialAssessment.income=self.customer.financialAssessment.income||Data.getIncomeList(),self.customer.financialAssessment.expenses=self.customer.financialAssessment.expenses||Data.getExpensesList(),self.customer.household=[{name:self.customer.firstName+" "+self.customer.lastName,relationship:"Applicant",dateOfBirth:self.customer.dateOfBirth}],self.setDependantList=function(numberOfDependants){var temp=angular.copy(self.customer.household);self.customer.household=[];for(var i=numberOfDependants-1;i>=0;i--)self.customer.household[i]=temp[i]||{}},self.splitByComma=function(foodItems){if(foodItems){var temp=[];return foodItems.forEach(function(itemId){self.foodList.forEach(function(food){itemId===food._id&&temp.push(food.name)})}),temp.join(", ")}},self.total=function(data,type){if(data)return data.reduce(function(a,b){return a+b[type]},0)},self.create=function(){var customer=new CustomerUser(self.customer);delete customer._id,user.hasApplied=!0,customer.$save(function(response){$state.go("root.createCustomerUser-success",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})},self.findOne=function(){self.customer=CustomerUser.get({customerId:$stateParams.customerId},function(customer){self.numberOfDependants=customer.household.length,self.setDependantList(self.numberOfDependants)})},self.update=function(){var customer=self.customer;customer.$update(function(){$state.go("root")},function(errorResponse){self.error=errorResponse.data.message})}}CustomerUserController.$inject=["$stateParams","$state","Authentication","CustomerUser","moment","Data"],angular.module("customer").controller("CustomerUserController",CustomerUserController)}(),function(){function capitalize(){function capitalizeFilter(input){return"string"==typeof input?input.split(" ").map(function(char){return char.charAt(0).toUpperCase()+char.substring(1)}).join(" "):input}return capitalizeFilter}angular.module("customer").filter("capitalize",capitalize)}(),function(){function splitCamelCase(){function splitCamelCaseFilter(string){return string.replace(/([A-Z])/g," $1").replace(/^./,function(char){return char.toUpperCase()})}return splitCamelCaseFilter}angular.module("customer").filter("splitCamelCase",splitCamelCase)}(),angular.module("customer").factory("CustomerUser",["$resource",function($resource){return $resource("customer/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}]).factory("CustomerAdmin",["$resource",function($resource){return $resource("admin/customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("customer").factory("Data",[function(){var incomeList=[{name:"Employment Income",self:0,other:0},{name:"Employment Insurance Benefits",self:0,other:0},{name:"Social Assistance",self:0,other:0},{name:"Spousal/Child Support",self:0,other:0},{name:"Self Employment",self:0,other:0},{name:"Pension Income (eg. Employer Plan)",self:0,other:0},{name:"Disability Income",self:0,other:0},{name:"Workplace Safety and Insurance Board (WSIB) Benefits",self:0,other:0},{name:"Canada Pension Plan (CPP)",self:0,other:0},{name:"Child Tax Benefits",self:0,other:0},{name:"Income from Rental Property",self:0,other:0},{name:"Severance/Termination Pay",self:0,other:0},{name:"Any other source of income not listed above",self:0,other:0}],expensesList=[{name:"Rent, mortgage or room and board",value:0},{name:"Food",value:0},{name:"Utilities (phone, internet, water, heat/hydro)",value:0},{name:"Transportation, parking and other personal supports",value:0},{name:"Dependant Care (eg. day care)",value:0},{name:"Disability Needs",value:0},{name:"Spousal/Child support",value:0},{name:"Loans",value:0},{name:"Leases",value:0},{name:"Insurance",value:0},{name:"Credit card debt",value:0},{name:"Property taxes",value:0},{name:"Other costs not listed above",value:0}];return{getIncomeList:function(){return incomeList},getExpensesList:function(){return expensesList}}}]),angular.module("donor").run(["Menus",function(Menus){Menus.addMenuItem("admin","Donor Database and Tax Receipts","admin/donors","item","root.listDonors","",["admin"],6),Menus.addMenuItem("donor","Edit Application","/edit","item","root.editDonorUser({donorId: sidebarCtrl.user._id})","",["donor"],0)}]),angular.module("donor").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.createDonorUser",{url:"donor/create",views:{"content@":{templateUrl:"modules/donor/views/user/create-donor.client.view.html",controller:"DonorUserController as donorCtrl"},"general-info@root.createDonorUser":{templateUrl:"modules/donor/views/partials/general-info.partial.html"}}}).state("root.createDonorUser-success",{url:"donor/create/success",views:{"content@":{templateUrl:"modules/donor/views/user/create-donor-success.client.view.html"}}}).state("root.viewDonorUser",{url:"donor/:donorId",views:{"content@":{templateUrl:"modules/donor/views/view-donor.client.view.html",controller:"DonorUserController as donorCtrl"}}}).state("root.editDonorUser",{url:"donor/:donorId/edit",views:{"content@":{templateUrl:"modules/donor/views/edit-donor.client.view.html",controller:"DonorUserController as donorCtrl"},"general-info@root.editDonorUser":{templateUrl:"modules/donor/views/partials/general-info.partial.html"}}}),$stateProvider.state("root.listDonors",{url:"admin/donors",views:{"content@":{templateUrl:"modules/donor/views/admin/list-donors.client.view.html",controller:"DonorAdminController as donorCtrl"}}}).state("root.viewDonorAdmin",{url:"admin/donors/:donorId",views:{"content@":{templateUrl:"modules/donor/views/view-donor.client.view.html",controller:"DonorAdminController as donorCtrl"}}}).state("root.editDonorAdmin",{url:"admin/donors/:donorId/edit",views:{"content@":{templateUrl:"modules/donor/views/edit-donor.client.view.html",controller:"DonorAdminController as donorCtrl"},"general-info@root.editDonorAdmin":{templateUrl:"modules/donor/views/partials/general-info.partial.html"}}})}]),function(){function DonorAdminController($window,$modal,$state,$stateParams,Authentication,DonorAdmin){function find(){self.donors=DonorAdmin.query({},function(donors){donors.forEach(function(donor){donor.totalDonated=0,donor.donations&&donor.donations.length&&(donor.totalDonated=donor.donations.reduce(function(prev,curr){return prev+(curr.eligibleForTax||0)},0))})})}function findOne(){DonorAdmin.get({donorId:$stateParams.donorId},function(donor){self.donor=donor,self.donations=donor.donations})}function update(){var donor=self.donor;donor.$update(function(response){$state.go("root.listDonors")},function(errorResponse){self.error=errorResponse.data.message})}function remove(donor){$window.confirm("Are you sure?")&&donor.$remove(function(){$state.go("root.listDonors",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})}function newDonation(){var modalInstance=$modal.open({templateUrl:"modules/donor/views/admin/create-donation.client.view.html",controller:"DonationController as donationCtrl",resolve:{donationItem:function(){return{}}}});modalInstance.result.then(function(donation){donation&&(self.donations.push(donation),self.update())})}function viewDonation(donation){$modal.open({templateUrl:"modules/donor/views/admin/view-donation.client.view.html",controller:"DonationController as donationCtrl",resolve:{donationItem:function(){return donation}}})}var self=this;self.donor={},self.donations=[],self.donationsCopy=[].concat(self.donations),self.donors=[],self.dtOptions={},self.find=find,self.findOne=findOne,self.update=update,self.newDonation=newDonation,self.viewDonation=viewDonation,self.remove=remove,Authentication.user.roles.indexOf("admin")<0&&$state.go("root"),self.dtOptions={dom:"Tlfrtip",tableTools:{sSwfPath:"/lib/datatables-tabletools/swf/copy_csv_xls.swf",aButtons:["copy","xls"]}}}DonorAdminController.$inject=["$window","$modal","$state","$stateParams","Authentication","DonorAdmin"],angular.module("donor").controller("DonorAdminController",DonorAdminController)}(),function(){function DonationController($modalInstance,$stateParams,Donation,donationItem){function create(){var donation=self.donation;Donation.saveDonation(donation).then(function(response){self.close(response.data)}).catch(function(errorResponse){self.error=errorResponse.data.message})}function sendEmail(){var donation=self.donation;Donation.sendReceipt(donation).then(function(response){self.close()}).catch(function(errorResponse){self.error=errorResponse.data.message})}var self=this;self.close=$modalInstance.close,self.create=create,self.sendEmail=sendEmail,self.dismiss=$modalInstance.dismiss,self.donation=donationItem,self.error=""}DonationController.$inject=["$modalInstance","$stateParams","Donation","donationItem"],angular.module("donor").controller("DonationController",DonationController)}(),function(){function DonorUserController($stateParams,$state,Authentication,DonorUser){var self=this,user=Authentication.user;self.authentication=Authentication,user||$state.go("root.signin"),user&&user.hasApplied&&$state.is("root.createDonorUser")&&$state.go("root.editDonorUser",{donorId:user._id}),self.donor=Authentication.user,self.create=function(){var donor=new DonorUser(self.donor);delete donor._id,self.donor.hasApplied=!0,donor.$save(function(response){$state.go("root.createDonorUser-success",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})},self.findOne=function(){self.donor=DonorUser.get({donorId:$stateParams.donorId})},self.update=function(){var donor=self.donor;donor.$update(function(){$state.go("root")},function(errorResponse){self.error=errorResponse.data.message})}}DonorUserController.$inject=["$stateParams","$state","Authentication","DonorUser"],angular.module("donor").controller("DonorUserController",DonorUserController)}(),function(){function Donation($http,$stateParams){function saveDonation(donation){return $http.post("admin/donations",donation)}function sendReceipt(donation){return $http.put("admin/donations/"+$stateParams.donorId,donation)}var service={saveDonation:saveDonation,sendReceipt:sendReceipt};return service}Donation.$inject=["$http","$stateParams"],angular.module("donor").factory("Donation",Donation)}(),angular.module("donor").factory("DonorUser",["$resource",function($resource){return $resource("donor/:donorId",{donorId:"@_id"},{update:{method:"PUT"}})}]).factory("DonorAdmin",["$resource",function($resource){return $resource("admin/donors/:donorId",{donorId:"@_id"},{update:{method:"PUT"}})}]),angular.module("driver").run(["Menus",function(Menus){Menus.addMenuItem("admin","Drivers and Route Assignment","admin/drivers","treeview","root.driver","",["admin"],4),Menus.addSubMenuItem("admin","admin/drivers","Drivers","admin/drivers","root.driver.admin","",["admin"],0),Menus.addSubMenuItem("admin","admin/drivers","Route Assignment","admin/drivers/routes","root.driver.routes","",["admin"],1),Menus.addMenuItem("driver","Edit Application","/edit","item","root.editVolunteerUser","",["driver"],0),Menus.addMenuItem("driver","Route Assignment","driver/routes","item","root.driver.user","",["driver"],1)}]),angular.module("driver").config(["uiGmapGoogleMapApiProvider",function(uiGmapGoogleMapApiProvider){uiGmapGoogleMapApiProvider.configure({v:"3.19",libraries:"geometry, visualization"})}]),angular.module("driver").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.driver",{abstract:!0}).state("root.driver.user",{url:"driver/routes",views:{"content@":{templateUrl:"modules/driver/views/user-driver.client.view.html",controller:"DriverUserController as driverCtrl"}}}).state("root.driver.admin",{url:"admin/drivers",views:{"content@":{templateUrl:"modules/driver/views/admin-driver.client.view.html",controller:"DriverAdminController as driverCtrl"}}}).state("root.driver.routes",{url:"admin/drivers/routes",views:{"content@":{templateUrl:"modules/driver/views/routes-driver.client.view.html",controller:"DriverRouteController as driverCtrl"}}})}]),function(){function ListDriversController(VolunteerAdmin,moment){function findDrivers(){self.isLoading=!0,VolunteerAdmin.query({},function(volunteers){self.drivers=volunteers.filter(function(volunteer){return volunteer.driver}).map(function(driver){return driver.deliveryStatus=driver.customers.every(function(customer){return moment(customer.lastDelivered).isSame(beginWeek)}),driver.deliveryStatus=driver.deliveryStatus?"In progress":"Completed",driver}),self.isLoading=!1})}var self=this;self.drivers={},self.driversCopy=[].concat(self.drivers),self.isLoading=!0,moment=moment.utc;var beginWeek=moment().startOf("isoWeek");findDrivers()}ListDriversController.$inject=["VolunteerAdmin","moment"],angular.module("driver").controller("DriverAdminController",ListDriversController)}(),function(){function DriverAdminController($filter,CustomerAdmin,VolunteerAdmin,uiGmapGoogleMapApi){function findDrivers(){self.isLoading=!0,VolunteerAdmin.query({},function(volunteers){self.drivers=volunteers.filter(function(volunteer){return volunteer.driver}),findCustomers()})}function findCustomers(){CustomerAdmin.query({},function(customers){self.customers=customers.filter(function(customer){return"Accepted"===customer.status}),createMarkers()})}function createMarkers(){var iconUrlBlue="modules/driver/images/gm-marker-blue.png",iconUrlPink="modules/driver/images/gm-marker-pink.png",min=.999999,max=1.000001;self.customers.forEach(function(customer){var marker={latitude:customer.location[1]*(Math.random()*(max-min)+min),longitude:customer.location[0]*(Math.random()*(max-min)+min),id:customer._id,icon:iconUrlPink,events:{click:function(){customer.isChecked=!customer.isChecked,marker.icon=customer.isChecked?iconUrlBlue:iconUrlPink},mouseover:function(marker,eventName,model){var content="<h4><strong>"+customer._id+"</strong> "+customer.address+"</h4>";self.map.window.marker=model,self.map.window.options.content=content,self.map.window.show=!0},mouseout:function(){self.map.window.show=!1}}};markers.push(marker)}),renderMap()}function renderMap(){uiGmapGoogleMapApi.then(function(){var geoToronto={latitude:43.8108899,longitude:-79.449906};self.map={center:geoToronto,zoom:12,markers:markers,window:{marker:{},show:!1,options:{content:"",pixelOffset:{height:-40,width:0}}}},self.isLoading=!1})}function assign(){self.isLoading=!0;var updatesInProgress=0,driver=self.driver,oldDrivers=[];self.customers.filter(function(customer){return customer.isChecked}).forEach(function(customer){if(customer.assignedTo&&customer.assignedTo._id!==driver._id){var oldDriver={};if(self.drivers.some(function(driver){
return driver._id===customer.assignedTo._id&&(oldDriver=driver,!0)}),oldDriver.customers.splice(oldDriver.customers.indexOf(customer._id),1),oldDrivers.length){var containsDriver=oldDrivers.some(function(driver){return driver._id===oldDriver._id});containsDriver||oldDrivers.push(oldDriver)}else oldDrivers.push(oldDriver)}customer.assignedTo&&customer.assignedTo._id===driver._id||(driver.customers.push(customer._id),customer.assignedTo=driver._id,updatesInProgress++,customer.$update(function(){updatesInProgress--,updatesInProgress||findDrivers()},function(errorResponse){self.error=errorResponse.data.message}))}),oldDrivers.length&&oldDrivers.forEach(function(driver){updatesInProgress++,driver.$update(function(){updatesInProgress--,updatesInProgress||findDrivers()},function(errorResponse){self.error=errorResponse.data.message})}),updatesInProgress++,driver.$update(function(){updatesInProgress--,updatesInProgress||findDrivers()},function(errorResponse){self.error=errorResponse.data.message})}function isDisabled(assignForm){if(self.customers)return!$filter("filter")(self.customers,{isChecked:!0}).length||assignForm.$invalid}var self=this;self.assign=assign,self.customers={},self.customersCopy=[].concat(self.customers),self.driver=null,self.drivers={},self.error={},self.isDisabled=isDisabled,self.isLoading=null,self.map={};var markers=[];findDrivers()}DriverAdminController.$inject=["$filter","CustomerAdmin","VolunteerAdmin","uiGmapGoogleMapApi"],angular.module("driver").controller("DriverRouteController",DriverAdminController)}(),function(){function DriverUserController($filter,Authentication,VolunteerUser,CustomerAdmin,moment){function findCustomers(){self.isLoading=!0,VolunteerUser.get({volunteerId:user._id},function(volunteer){self.driver=volunteer,self.customers=volunteer.customers.filter(function(customer){return moment(customer.lastPacked).isSame(beginWeek)&&!moment(customer.lastDelivered).isSame(beginWeek)}),self.isLoading=!1})}function deliver(){self.isLoading=!0;var updatesInProgress=0;self.driver;self.customers.filter(function(customer){return customer.isChecked}).forEach(function(customerOld){var customer=new CustomerAdmin(customerOld);customer.lastDelivered=beginWeek,updatesInProgress++,customer.$update(function(){updatesInProgress--,updatesInProgress||findCustomers()},function(errorResponse){self.error=errorResponse.data.message})})}function updateNotes(){self.isLoading=!0;var driver=self.driver;driver.generalNotes=driver.newNotes,driver.$update(function(){findCustomers()},function(errorResponse){self.error=errorResponse.data.message})}function isDisabled(){if(self.customers)return!$filter("filter")(self.customers,{isChecked:!0}).length}var self=this,user=Authentication.user;self.allChecked=!1,self.customers={},self.customersCopy=[].concat(self.customers),self.deliver=deliver,self.driver={},self.error={},self.isDisabled=isDisabled,self.isLoading=null,self.updateNotes=updateNotes,moment=moment.utc;var beginWeek=moment().startOf("isoWeek");findCustomers(),self.selectAll=function(){self.customers.forEach(function(customer){customer.isChecked=!self.allChecked})}}DriverUserController.$inject=["$filter","Authentication","VolunteerUser","CustomerAdmin","moment"],angular.module("driver").controller("DriverUserController",DriverUserController)}(),angular.module("food").run(["Menus",function(Menus){Menus.addMenuItem("admin","Inventory","admin/foods","item","root.foods","",["admin"],3)}]),angular.module("food").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.foods",{url:"admin/foods",views:{"content@":{templateUrl:"modules/food/views/foods.client.view.html",controller:"FoodController as foodCtrl"}}})}]),function(){function FoodController(Food,FoodItem){var self=this;self.itemsCopy=[].concat(self.items),self.createItem=function(){var item=new FoodItem(self.item);item.$save(function(){self.find(),delete self.item},function(errorResponse){self.errorItem=errorResponse.data.message})},self.updateItem=function(selectedItem){var item=new FoodItem(selectedItem);item.$update(function(){self.find()},function(errorResponse){self.errorItem=errorResponse.data.message})},self.removeItem=function(selectedItem){var item=new FoodItem(selectedItem);item.$remove(function(){self.find()},function(errorResponse){self.errorItem=errorResponse.data.message})},self.create=function(){var food=new Food(self.food);food.$save(function(){self.find(),delete self.food},function(errorResponse){self.error=errorResponse.data.message})},self.find=function(){self.isLoading=!0,Food.query({},function(foods){self.foods=foods,self.items=[];for(var food in foods)if(food=foods[food],food.items)for(var item in food.items)item=food.items[item],item.categoryName=food.category,item.categoryId=food._id,item.categoryIdOld=food._id,self.items.push(item);self.isLoading=!1}),delete self.error,delete self.errorItem},self.update=function(food){food.$update(function(){self.find()},function(errorResponse){self.error=errorResponse.data.message})},self.remove=function(food){food.$remove(function(){self.find()},function(errorResponse){self.error=errorResponse.data.message})}}FoodController.$inject=["Food","FoodItem"],angular.module("food").controller("FoodController",FoodController)}(),angular.module("food").factory("Food",["$resource",function($resource){return $resource("admin/foods/:foodId",{foodId:"@_id"},{update:{method:"PUT"}})}]).factory("FoodItem",["$resource",function($resource){return $resource("admin/foods/:foodId/items/:itemId",{foodId:"@categoryId",itemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("media").run(["Menus",function(Menus){Menus.addMenuItem("admin","Media","media","item","root.changeMedia","",["admin"],8)}]),angular.module("media").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("root.changeMedia",{url:"media",views:{"content@":{templateUrl:"modules/media/views/change-media.client.view.html",controller:"ChangeMediaController as settingsCtrl"}}})}]),function(){function ChangeMediaController($scope,$rootScope,$stateParams,$state,Authentication,MediaObject,FileUploader){$scope.uploader=new FileUploader({url:"api/media/uploadLogo"}),$scope.upload=function(item){item.onSuccess=function(media){$rootScope.mediaData=media},item.upload()};var self=this,user=Authentication.user;self.authentication=Authentication,user||$state.go("root.signin"),MediaObject.readMedia().then(function(response){$rootScope.mediaData=response.data},function(response){console.log("GET MEDIA DATA: error")}),$scope.saveMedia=function(){MediaObject.saveMedia($rootScope.mediaData)}}ChangeMediaController.$inject=["$scope","$rootScope","$stateParams","$state","Authentication","MediaObject","FileUploader"],angular.module("settings").controller("ChangeMediaController",ChangeMediaController)}(),angular.module("media").directive("ngThumb",["$window",function($window){var helper={support:!(!$window.FileReader||!$window.CanvasRenderingContext2D),isFile:function(item){return angular.isObject(item)&&item instanceof $window.File},isImage:function(file){var type="|"+file.type.slice(file.type.lastIndexOf("/")+1)+"|";return"|jpg|png|jpeg|bmp|gif|".indexOf(type)!==-1}};return{restrict:"A",template:"<canvas/>",link:function(scope,element,attributes){function onLoadFile(event){var img=new Image;img.onload=function(){var width=params.width||this.width/this.height*params.height,height=params.height||this.height/this.width*params.width;canvas.attr({width:width,height:height}),canvas[0].getContext("2d").drawImage(this,0,0,width,height)},img.src=event.target.result}if(helper.support){var params=scope.$eval(attributes.ngThumb);if(helper.isFile(params.file)&&helper.isImage(params.file)){var canvas=element.find("canvas"),reader=new FileReader;reader.onload=onLoadFile,reader.readAsDataURL(params.file)}}}}}]),function(){function MediaObject($http,$stateParams){function saveMedia(mediaData){return $http.post("api/media/",mediaData)}function readMedia(){return $http.get("api/media/")}var service={saveMedia:saveMedia,readMedia:readMedia};return service}MediaObject.$inject=["$http","$stateParams"],angular.module("media").factory("MediaObject",MediaObject)}(),angular.module("packing").run(["Menus",function(Menus){Menus.addMenuItem("admin","Packing List","admin/packing","item","root.packing","",["admin"],2)}]),angular.module("packing").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.packing",{url:"admin/packing",views:{"content@":{templateUrl:"modules/packing/views/packing.client.view.html",controller:"PackingController as packingCtrl"}}})}]),function(){function PackingController($filter,Food,FoodItem,CustomerAdmin,moment){function selectItems(){self.allItems=self.items.filter(function(item){if(item.frequency){var interval=moment(item.startDate).recur().every(item.frequency).weeks();return interval.matches(beginWeek)}}),findCustomers()}function findCustomers(){CustomerAdmin.query({},function(customers){self.customers=customers.filter(function(customer){return!moment(customer.lastPacked).isSame(beginWeek)&&"Accepted"===customer.status}),getFoodItems()})}function getFoodItems(){self.customers.forEach(function(customer){customer.packingList=self.allItems.filter(function(item){if(customer.foodPreferences.indexOf(item._id)>-1)return item.toBeDistributed++,item})}),verifyInventory()}function verifyInventory(){var changed=!1;self.allItems=self.allItems.filter(function(item){return item.toBeDistributed>item.quantity?(changed=!0,null):item}),changed?getFoodItems():self.isLoading=!1}var self=this;self.customersCopy=[].concat(self.customers),moment=moment.utc;var beginWeek=moment().startOf("isoWeek");self.find=function(){self.isLoading=!0,Food.query({},function(foods){self.items=[];for(var food in foods)if(food=foods[food],food.items)for(var item in food.items)item=food.items[item],item.categoryName=food.category,item.categoryId=food._id,item.toBeDistributed=0,self.items.push(item);selectItems()}),delete self.error},self.update=function(){self.isLoading=!0;var updatesInProgress=0;self.customers.forEach(function(customer){customer.isChecked&&(customer.packingList.forEach(function(itemCustomer){self.allItems.some(function(item){return item._id===itemCustomer._id&&(item.quantity--,item.isPacked=!0,!0)})}),customer.lastPacked=beginWeek,updatesInProgress++,customer.$update(function(){updatesInProgress--,updatesInProgress||self.find()},function(errorResponse){self.error=errorResponse.data.message}))}),self.allItems.forEach(function(item){item.isPacked&&(item=new FoodItem(item),updatesInProgress++,item.$update(function(){updatesInProgress--,updatesInProgress||self.find()},function(errorResponse){self.error=errorResponse.data.message}))})},self.getColSpan=function(customer){return self.allItems&&customer.packingList?self.allItems.length-customer.packingList.length:1},self.selectAll=function(){self.customers.forEach(function(customer){customer.isChecked=!self.allSelected})},self.isDisabled=function(){return!self.customers||!$filter("filter")(self.customers,{isChecked:!0}).length}}PackingController.$inject=["$filter","Food","FoodItem","CustomerAdmin","moment"],angular.module("packing").controller("PackingController",PackingController)}(),angular.module("questionnaire").run(["Menus",function(Menus){Menus.addMenuItem("admin","Questionnaire Editor","admin/questionnaires","item","root.questionnaires","",["admin"],10)}]),angular.module("questionnaire").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.questionnaires",{url:"admin/questionnaires",views:{"content@":{templateUrl:"modules/questionnaire/views/questionnaires.client.view.html",controller:"QuestionnaireController as questionnaireCtrl"}}})}]),function(){function QuestionnaireController(Questionnaire,Section,Field){var self=this;self.questionnairesCopy=[].concat(self.questionnaires),self.sectionsCopy=[].concat(self.sections),self.fieldsCopy=[].concat(self.fields),self.createQuestionnaire=function(){var questionnaire=new Questionnaire(self.questionnaire);questionnaire.$save(function(){self.findQuestionnaires(),delete self.questionnaire},function(errorResponse){self.error=errorResponse.data.message})},self.findQuestionnaires=function(){self.isLoading=!0,Questionnaire.query({},function(questionnaires){self.questionnaires=questionnaires,self.isLoading=!1}),delete self.error,delete self.errorItem},self.updateQuestionnaire=function(questionnaire){questionnaire.$update(function(){self.findQuestionnaires()},function(errorResponse){self.error=errorResponse.data.message})},self.removeQuestionnaire=function(questionnaire){questionnaire.$remove(function(){self.findQuestionnaires()},function(errorResponse){self.error=errorResponse.data.message})},self.createSection=function(){var section=new Section(self.section);section.$save(function(){self.findSections(),delete self.section},function(errorResponse){self.errorSection=errorResponse.data.message})},self.findSections=function(){self.isLoading=!0,Section.query({},function(sections){self.sections=sections,self.isLoading=!1}),delete self.error,delete self.errorItem},self.updateSection=function(selectedSection){var section=new Section(selectedSection);section.$update(function(){self.findSections()},function(errorResponse){self.errorSection=errorResponse.data.message})},self.removeSection=function(selectedSection){var section=new Section(selectedSection);section.$remove(function(){self.findSections()},function(errorResponse){self.errorItem=errorResponse.data.message})},self.createField=function(){var field=new Field(self.field);field.$save(function(){self.findFields(),delete self.field},function(errorResponse){self.errorField=errorResponse.data.message})},self.updateField=function(selectedField){var field=new Field(selectedField);field.$update(function(){self.findFields()},function(errorResponse){self.errorField=errorResponse.data.message})},self.findFields=function(){self.isLoading=!0,Field.query({},function(fields){self.fields=fields,self.isLoading=!1}),delete self.error,delete self.errorItem},self.removeField=function(selectedField){var field=new Field(selectedField);field.$remove(function(){self.findFields()},function(errorResponse){self.errorField=errorResponse.data.message})}}QuestionnaireController.$inject=["Questionnaire","Section","Field"],angular.module("questionnaire").controller("QuestionnaireController",QuestionnaireController)}(),angular.module("questionnaire").factory("Questionnaire",["$resource",function($resource){return $resource("api/questionnaires/:questionnaireId",{questionnaireId:"@_id"},{update:{method:"PUT"}})}]).factory("Section",["$resource",function($resource){return $resource("api/sections/:sectionId",{questionnaireId:"@questionnaireId",sectionId:"@_id"},{update:{method:"PUT"}})}]).factory("Field",["$resource",function($resource){return $resource("api/fields/:fieldId",{sectionId:"@sectionId",fieldId:"@_id"},{update:{method:"PUT"}})}]),angular.module("schedule").run(["Menus",function(Menus){Menus.addMenuItem("admin","Food Schedule","admin/schedules","item","root.schedules","",["admin"],1)}]),angular.module("schedule").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.schedules",{url:"admin/schedules",views:{"content@":{templateUrl:"modules/schedule/views/schedules.client.view.html",controller:"ScheduleController as scheduleCtrl"}}})}]),function(){function ScheduleController(Food,FoodItem,moment){var self=this;self.itemsCopy=[].concat(self.items),moment=moment.utc,self.find=function(){self.isLoading=!0,Food.query({},function(foods){self.items=[];for(var food in foods)if(food=foods[food],food.items)for(var item in food.items)item=food.items[item],item.categoryName=food.category,item.categoryId=food._id,item.startDate=moment(item.startDate).format("YYYY-[W]W"),self.items.push(item);self.isLoading=!1}),delete self.error},self.update=function(selectedItem){selectedItem.startDate=moment(selectedItem.startDate);var item=new FoodItem(selectedItem);item.$update(function(){self.find()},function(errorResponse){self.error=errorResponse.data.message})}}ScheduleController.$inject=["Food","FoodItem","moment"],angular.module("schedule").controller("ScheduleController",ScheduleController)}(),angular.module("settings").run(["Menus",function(Menus){Menus.addMenuItem("admin","App Settings","settings","item","root.changeSettings","",["admin"],7)}]),angular.module("settings").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("root.changeSettings",{url:"settings",views:{"content@":{templateUrl:"modules/settings/views/change-settings.client.view.html",controller:"ChangeSettingsController as settingsCtrl"},"basic-settings@root.changeSettings":{templateUrl:"modules/settings/views/partials/basic-settings.partial.html"}}})}]),function(){function ChangeSettingsController($scope,$rootScope,$stateParams,$state,Authentication,SettingsObject){var self=this,user=Authentication.user;self.authentication=Authentication,user||$state.go("root.signin"),SettingsObject.readSettings().then(function(response){$rootScope.tconfig=response.data},function(response){console.log("GET SETTINGS: error")}),$scope.saveSettings=function(){SettingsObject.saveSettings($rootScope.tconfig)}}ChangeSettingsController.$inject=["$scope","$rootScope","$stateParams","$state","Authentication","SettingsObject"],angular.module("settings").controller("ChangeSettingsController",ChangeSettingsController)}(),function(){function SettingsObject($http,$stateParams){function saveSettings(settings){return $http.post("api/settings/",settings)}function readSettings(){var settings=$http.get("api/settings/");return settings}var service={saveSettings:saveSettings,readSettings:readSettings};return service}SettingsObject.$inject=["$http","$stateParams"],angular.module("settings").factory("SettingsObject",SettingsObject)}(),angular.module("users").run(["Menus",function(Menus){Menus.addMenuItem("user","Apply","/create","item","root.createREPLACETYPEUser","",["user"],0),Menus.addMenuItem("user","Edit Application","/edit","item","root.editREPLACETYPEUser({REPLACEIDId: sidebarCtrl.user._id})","",["user"],0)}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:$location.path("403");break;case 500:$location.path("500")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.profile",{url:"settings/profile",views:{"content@":{templateUrl:"modules/users/views/settings/edit-profile.client.view.html",controller:"SettingsController as settingsCtrl"}}}).state("root.password",{url:"settings/password",views:{"content@":{templateUrl:"modules/users/views/settings/change-password.client.view.html",controller:"SettingsController as settingsCtrl"}}}).state("root.accounts",{url:"settings/accounts",views:{"content@":{templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}}}).state("root.signup",{url:"signup",views:{"content@":{templateUrl:"modules/users/views/authentication/signup.client.view.html",controller:"AuthenticationController as authenticationCtrl"}}}).state("root.signin",{url:"signin",views:{"content@":{templateUrl:"modules/users/views/authentication/signin.client.view.html",controller:"AuthenticationController as authenticationCtrl"}}}).state("root.forgot",{url:"password/forgot",views:{"content@":{templateUrl:"modules/users/views/password/forgot-password.client.view.html",controller:"PasswordController as passwordCtrl"}}}).state("root.reset-invalid",{url:"password/reset/invalid",views:{"content@":{templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}}}).state("root.reset-success",{url:"password/reset/success",views:{"content@":{templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}}}).state("root.reset",{url:"password/reset/:token",views:{"content@":{templateUrl:"modules/users/views/password/reset-password.client.view.html",controller:"PasswordController as passwordCtrl"}}})}]),function(){function AuthenticationController($http,Authentication,$state){var self=this;self.authentication=Authentication,self.authentication.user&&$state.go("root"),self.signup=function(){$http.post("/auth/signup",self.credentials).success(function(response){self.authentication.user=response;var accountType=response.accountType[0].charAt(0).toUpperCase()+response.accountType[0].slice(1);$state.go("root.create"+accountType+"User",null,{reload:!0})}).error(function(response){self.error=response.message})},self.signin=function(){$http.post("/auth/signin",self.credentials).success(function(response){self.authentication.user=response;var accountType=response.accountType[0].charAt(0).toUpperCase()+response.accountType[0].slice(1);"admin"===self.authentication.user.roles[0]?$state.go("root",null,{reload:!0}):$state.go("root.create"+accountType+"User",null,{reload:!0})}).error(function(response){self.error=response.message})}}AuthenticationController.$inject=["$http","Authentication","$state"],angular.module("users").controller("AuthenticationController",AuthenticationController)}(),function(){function PasswordController($stateParams,$http,$state,Authentication){var self=this;self.authentication=Authentication,self.authentication.user&&$state.go("root"),self.askForPasswordReset=function(){self.success=self.error=null,$http.post("/auth/forgot",self.credentials).success(function(response){self.credentials=null,self.success=response.message}).error(function(response){self.credentials=null,self.error=response.message})},self.resetUserPassword=function(){self.success=self.error=null,$http.post("/auth/reset/"+$stateParams.token,self.passwordDetails).success(function(response){self.passwordDetails=null,Authentication.user=response,$state.go("root.reset-success",null,{reload:!0})}).error(function(response){self.error=response.message})}}PasswordController.$inject=["$stateParams","$http","$state","Authentication"],angular.module("users").controller("PasswordController",PasswordController)}(),function(){function SettingsController($http,$location,Users,Authentication){var self=this;self.user=Authentication.user,self.user||$location.path("/"),self.updateUserProfile=function(isValid){if(isValid){self.success=self.error=null;var user=new Users(self.user);user.$update(function(response){self.success=!0,Authentication.user=response},function(response){self.error=response.data.message})}else self.submitted=!0},self.changeUserPassword=function(){self.success=self.error=null,$http.post("/users/password",self.passwordDetails).success(function(response){self.success=!0,self.passwordDetails=null}).error(function(response){self.error=response.message})}}SettingsController.$inject=["$http","$location","Users","Authentication"],angular.module("users").controller("SettingsController",SettingsController)}(),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("volunteer").run(["Menus",function(Menus){Menus.addMenuItem("admin","Volunteer Database","admin/volunteers","item","root.listVolunteers","",["admin"],5),Menus.addMenuItem("volunteer","Edit Application","/edit","item","root.editVolunteerUser({volunteerId: sidebarCtrl.user._id})","",["volunteer"],0)}]),angular.module("volunteer").config(["$stateProvider",function($stateProvider){$stateProvider.state("root.createVolunteerUser",{url:"volunteer/create",views:{"content@":{templateUrl:"modules/volunteer/views/user/create-volunteer.client.view.html",controller:"VolunteerUserController as volunteerCtrl"},"general-info@root.createVolunteerUser":{templateUrl:"modules/volunteer/views/partials/general-info.partial.html"}}}).state("root.createVolunteerUser-success",{url:"volunteer/create/success",views:{"content@":{templateUrl:"modules/volunteer/views/user/create-volunteer-success.client.view.html"}}}).state("root.viewVolunteerUser",{url:"volunteer/:volunteerId",views:{"content@":{templateUrl:"modules/volunteer/views/view-volunteer.client.view.html",controller:"VolunteerUserController as volunteerCtrl"}}}).state("root.editVolunteerUser",{url:"volunteer/:volunteerId/edit",views:{"content@":{templateUrl:"modules/volunteer/views/edit-volunteer.client.view.html",controller:"VolunteerUserController as volunteerCtrl"},"general-info@root.editVolunteerUser":{templateUrl:"modules/volunteer/views/partials/general-info.partial.html"}}}),$stateProvider.state("root.listVolunteers",{url:"admin/volunteers",views:{"content@":{templateUrl:"modules/volunteer/views/admin/list-volunteers.client.view.html",controller:"VolunteerAdminController as volunteerCtrl"}}}).state("root.viewVolunteerAdmin",{url:"admin/volunteers/:volunteerId",views:{"content@":{templateUrl:"modules/volunteer/views/view-volunteer.client.view.html",controller:"VolunteerAdminController as volunteerCtrl"}}}).state("root.editVolunteerAdmin",{url:"admin/volunteers/:volunteerId/edit",views:{"content@":{templateUrl:"modules/volunteer/views/edit-volunteer.client.view.html",controller:"VolunteerAdminController as volunteerCtrl"},"general-info@root.editVolunteerAdmin":{templateUrl:"modules/volunteer/views/partials/general-info.partial.html"}}})}]),function(){function VolunteerAdminController($window,$stateParams,$state,Authentication,VolunteerAdmin){var self=this;self.authentication=Authentication,self.authentication.user.roles.indexOf("admin")<0&&$state.go("root"),self.dtOptions={dom:"Tlfrtip",tableTools:{sSwfPath:"/lib/datatables-tabletools/swf/copy_csv_xls.swf",aButtons:["copy","xls"]}},self.find=function(){self.volunteers=VolunteerAdmin.query()},self.findOne=function(){self.volunteer=VolunteerAdmin.get({volunteerId:$stateParams.volunteerId})},self.update=function(updateType){var volunteer=self.volunteer;"Driver"===updateType?volunteer.driver=!0:"Inactive"===updateType?(volunteer.status=updateType,volunteer.driver=!1):volunteer.status=updateType,volunteer.$update(function(){$state.go("root.listVolunteers")},function(errorResponse){self.error=errorResponse.data.message})},self.delete=function(volunteer){$window.confirm("Are you sure?")&&volunteer.$delete(function(){$state.go("root.listVolunteers",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})}}VolunteerAdminController.$inject=["$window","$stateParams","$state","Authentication","VolunteerAdmin"],angular.module("volunteer").controller("VolunteerAdminController",VolunteerAdminController)}(),function(){function VolunteerUserController($stateParams,$state,Authentication,VolunteerUser,moment){var self=this,user=Authentication.user;self.authentication=Authentication,user||$state.go("root.signin"),user&&user.hasApplied&&$state.is("root.createVolunteerUser")&&$state.go("root.editVolunteerUser",{volunteerId:user._id}),self.volunteer=Authentication.user,self.isMinor=function(dateOfBirth){return moment().diff(dateOfBirth,"years")<18},self.create=function(){var volunteer=new VolunteerUser(self.volunteer);delete volunteer._id,self.volunteer.hasApplied=!0,volunteer.$save(function(response){$state.go("root.createVolunteerUser-success",null,{reload:!0})},function(errorResponse){self.error=errorResponse.data.message})},self.findOne=function(){self.volunteer=VolunteerUser.get({volunteerId:$stateParams.volunteerId})},self.update=function(){var volunteer=self.volunteer;volunteer.$update(function(){$state.go("root")},function(errorResponse){self.error=errorResponse.data.message})}}VolunteerUserController.$inject=["$stateParams","$state","Authentication","VolunteerUser","moment"],angular.module("volunteer").controller("VolunteerUserController",VolunteerUserController)}(),angular.module("volunteer").factory("VolunteerUser",["$resource",function($resource){return $resource("volunteer/:volunteerId",{volunteerId:"@_id"},{update:{method:"PUT"}})}]).factory("VolunteerAdmin",["$resource",function($resource){return $resource("admin/volunteers/:volunteerId",{volunteerId:"@_id"},{update:{method:"PUT"}})}]);